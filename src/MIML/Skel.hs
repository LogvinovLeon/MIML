{-# LANGUAGE GADTs #-}
module MIML.Skel where

-- Haskell module generated by the BNF converter

import MIML.Abs
import MIML.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  EAdd exp0 exp1 -> failure t
  ESub exp0 exp1 -> failure t
  EMul exp0 exp1 -> failure t
  EDiv exp0 exp1 -> failure t
  EInt integer -> failure t

transExp :: Exp -> Result
transExp t = case t of
  EAdd exp0 exp1 -> failure t
  ESub exp0 exp1 -> failure t
  EMul exp0 exp1 -> failure t
  EDiv exp0 exp1 -> failure t
  EInt integer -> failure t


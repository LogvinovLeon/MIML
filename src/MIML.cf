entrypoints Prog;

Program . Prog ::= [Def] Exp ;

terminator Def ";" ;

DValue . Def ::= "let" Ident "=" Exp ;
DFunc  . Def ::= "let" Ident [Parameter] "=" [Def] Exp;
DType  . Def ::= "type" ValueC [Ident] "=" [TypeD] ;

terminator Ident "" ;
separator TypeD "|" ;
TypeDec . TypeD ::= ValueC [Type1] ;

terminator Type "" ;
IntegerType  . Type1 ::= "Integer" ;
BooleanType  . Type1 ::= "Boolean" ;
DoubleType   . Type1 ::= "Double" ;
ADType       . Type ::= ValueC [Type1] ;
coercions Type 1;
separator Type1 "" ;

terminator nonempty Parameter "" ;
Param . Parameter ::= Ident ;

EIf    . Exp1 ::= "if" Exp2 "then" Exp2 "else" Exp2 "fi" ;
EMatch . Exp1 ::= "match" Exp2 "with" [MatchC] "end" ;

separator nonempty MatchC "|" ;

MatchClause . MatchC ::= Pattern "->" Exp ;

VarPattern         . Pattern2 ::= Ident ;
IntPattern         . Pattern2 ::= Integer ;
DoublePattern      . Pattern2 ::= Double ;
NilPattern         . Pattern2 ::= "[]" ;
WildCardPattern    . Pattern2 ::= "_" ;
ConsPattern        . Pattern1 ::= Pattern1 ":" Pattern2 ;
TypePattern        . Pattern ::= ValueC [Pattern1] ;
coercions Pattern 2 ;

terminator Pattern1 "" ;

token UIdent (upper (letter | digit | '_')*) ;

ValueConstructor . ValueC ::= UIdent ;

EAnd . Exp2 ::= Exp3 "&&" Exp3 ;
EOr  . Exp2 ::= Exp3 "||" Exp3 ;
EXor . Exp2 ::= Exp3 "^" Exp3 ;

EEq . Exp3 ::= Exp4 "==" Exp4 ;
ENe . Exp3 ::= Exp4 "!=" Exp4 ;
ELe . Exp3 ::= Exp4 "<" Exp4 ;
EGe . Exp3 ::= Exp4 ">" Exp4 ;

EPlus  . Exp4 ::= Exp4 "+" Exp5 ;
EMinus . Exp4 ::= Exp4 "-" Exp5 ;

ETimes . Exp5 ::= Exp5 "*" Exp6 ;
EDiv   . Exp5 ::= Exp5 "/" Exp6 ;

EApp . Exp6 ::= Ident [Exp7] ;

token Boolean ('t''r''u''e' | 'f''a''l''s''e') ;

EVar         . Exp7 ::= Ident ;
EInt         . Exp7 ::= Integer ;
EBool        . Exp7 ::= Boolean ;
EDouble      . Exp7 ::= Double ;
EList        . Exp7 ::= "[" [ListE] "]" ;
EConstructor . Exp7 ::= ValueC [Exp7] ;

ListElem . ListE ::= Exp ;

separator ListE "," ;

separator nonempty Exp7 "" ;

coercions Exp 7;

comment "//" ;
comment "#" ;
comment "/*" "*/" ;

{-# LANGUAGE GADTs, KindSignatures, DataKinds #-}
module MIML.Abs (Tree(..), Exp, Ident, johnMajorEq, module MIML.ComposOp) where

import MIML.ComposOp

import Data.Monoid (mappend)


-- Haskell module generated by the BNF converter

data Tag = Exp_ | Ident_
type Exp = Tree Exp_
type Ident = Tree Ident_

data Tree :: Tag -> * where
    EIf :: Exp -> Exp -> Exp -> Tree Exp_
    EEq :: Exp -> Exp -> Tree Exp_
    ENe :: Exp -> Exp -> Tree Exp_
    ELe :: Exp -> Exp -> Tree Exp_
    EGe :: Exp -> Exp -> Tree Exp_
    EPlus :: Exp -> Exp -> Tree Exp_
    EMinus :: Exp -> Exp -> Tree Exp_
    ETimes :: Exp -> Exp -> Tree Exp_
    EDiv :: Exp -> Exp -> Tree Exp_
    ENeg :: Exp -> Tree Exp_
    EApp :: Ident -> [Exp] -> Tree Exp_
    EVar :: Ident -> Tree Exp_
    EInt :: Integer -> Tree Exp_
    ELet :: Ident -> Exp -> Exp -> Tree Exp_
    Ident :: String -> Tree Ident_

instance Compos Tree where
  compos r a f t = case t of
      EIf exp0 exp1 exp2 -> r EIf `a` f exp0 `a` f exp1 `a` f exp2
      EEq exp0 exp1 -> r EEq `a` f exp0 `a` f exp1
      ENe exp0 exp1 -> r ENe `a` f exp0 `a` f exp1
      ELe exp0 exp1 -> r ELe `a` f exp0 `a` f exp1
      EGe exp0 exp1 -> r EGe `a` f exp0 `a` f exp1
      EPlus exp0 exp1 -> r EPlus `a` f exp0 `a` f exp1
      EMinus exp0 exp1 -> r EMinus `a` f exp0 `a` f exp1
      ETimes exp0 exp1 -> r ETimes `a` f exp0 `a` f exp1
      EDiv exp0 exp1 -> r EDiv `a` f exp0 `a` f exp1
      ENeg exp -> r ENeg `a` f exp
      EApp ident exps -> r EApp `a` f ident `a` foldr (a . a (r (:)) . f) (r []) exps
      EVar ident -> r EVar `a` f ident
      ELet ident exp0 exp1 -> r ELet `a` f ident `a` f exp0 `a` f exp1
      _ -> r t

instance Show (Tree c) where
  showsPrec n t = case t of
    EIf exp0 exp1 exp2 -> opar n . showString "EIf" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . showChar ' ' . showsPrec 1 exp2 . cpar n
    EEq exp0 exp1 -> opar n . showString "EEq" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    ENe exp0 exp1 -> opar n . showString "ENe" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    ELe exp0 exp1 -> opar n . showString "ELe" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    EGe exp0 exp1 -> opar n . showString "EGe" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    EPlus exp0 exp1 -> opar n . showString "EPlus" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    EMinus exp0 exp1 -> opar n . showString "EMinus" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    ETimes exp0 exp1 -> opar n . showString "ETimes" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    EDiv exp0 exp1 -> opar n . showString "EDiv" . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    ENeg exp -> opar n . showString "ENeg" . showChar ' ' . showsPrec 1 exp . cpar n
    EApp ident exps -> opar n . showString "EApp" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 exps . cpar n
    EVar ident -> opar n . showString "EVar" . showChar ' ' . showsPrec 1 ident . cpar n
    EInt integer -> opar n . showString "EInt" . showChar ' ' . showsPrec 1 integer . cpar n
    ELet ident exp0 exp1 -> opar n . showString "ELet" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 exp0 . showChar ' ' . showsPrec 1 exp1 . cpar n
    Ident str -> opar n . showString "Ident" . showChar ' ' . showsPrec 1 str . cpar n
   where opar n = if n > 0 then showChar '(' else id
         cpar n = if n > 0 then showChar ')' else id

instance Eq (Tree c) where (==) = johnMajorEq

johnMajorEq :: Tree a -> Tree b -> Bool
johnMajorEq (EIf exp0 exp1 exp2) (EIf exp0_ exp1_ exp2_) = exp0 == exp0_ && exp1 == exp1_ && exp2 == exp2_
johnMajorEq (EEq exp0 exp1) (EEq exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (ENe exp0 exp1) (ENe exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (ELe exp0 exp1) (ELe exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (EGe exp0 exp1) (EGe exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (EPlus exp0 exp1) (EPlus exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (EMinus exp0 exp1) (EMinus exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (ETimes exp0 exp1) (ETimes exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (EDiv exp0 exp1) (EDiv exp0_ exp1_) = exp0 == exp0_ && exp1 == exp1_
johnMajorEq (ENeg exp) (ENeg exp_) = exp == exp_
johnMajorEq (EApp ident exps) (EApp ident_ exps_) = ident == ident_ && exps == exps_
johnMajorEq (EVar ident) (EVar ident_) = ident == ident_
johnMajorEq (EInt integer) (EInt integer_) = integer == integer_
johnMajorEq (ELet ident exp0 exp1) (ELet ident_ exp0_ exp1_) = ident == ident_ && exp0 == exp0_ && exp1 == exp1_
johnMajorEq (Ident str) (Ident str_) = str == str_
johnMajorEq _ _ = False

instance Ord (Tree c) where
  compare x y = compare (index x) (index y) `mappend` compareSame x y
index :: Tree c -> Int
index (EIf _ _ _) = 0
index (EEq _ _) = 1
index (ENe _ _) = 2
index (ELe _ _) = 3
index (EGe _ _) = 4
index (EPlus _ _) = 5
index (EMinus _ _) = 6
index (ETimes _ _) = 7
index (EDiv _ _) = 8
index (ENeg _) = 9
index (EApp _ _) = 10
index (EVar _) = 11
index (EInt _) = 12
index (ELet _ _ _) = 13
index (Ident _) = 14
compareSame :: Tree c -> Tree c -> Ordering
compareSame (EIf exp0 exp1 exp2) (EIf exp0_ exp1_ exp2_) = mappend (compare exp0 exp0_) (mappend (compare exp1 exp1_) (compare exp2 exp2_))
compareSame (EEq exp0 exp1) (EEq exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (ENe exp0 exp1) (ENe exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (ELe exp0 exp1) (ELe exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (EGe exp0 exp1) (EGe exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (EPlus exp0 exp1) (EPlus exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (EMinus exp0 exp1) (EMinus exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (ETimes exp0 exp1) (ETimes exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (EDiv exp0 exp1) (EDiv exp0_ exp1_) = mappend (compare exp0 exp0_) (compare exp1 exp1_)
compareSame (ENeg exp) (ENeg exp_) = compare exp exp_
compareSame (EApp ident exps) (EApp ident_ exps_) = mappend (compare ident ident_) (compare exps exps_)
compareSame (EVar ident) (EVar ident_) = compare ident ident_
compareSame (EInt integer) (EInt integer_) = compare integer integer_
compareSame (ELet ident exp0 exp1) (ELet ident_ exp0_ exp1_) = mappend (compare ident ident_) (mappend (compare exp0 exp0_) (compare exp1 exp1_))
compareSame (Ident str) (Ident str_) = compare str str_
compareSame x y = error "BNFC error:" compareSame

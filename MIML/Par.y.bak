-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module MIML.Par where
import MIML.Abs
import MIML.Lex
import MIML.ErrM

}

%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  '+' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '/' { PT _ (TS _ 7) }
  '<' { PT _ (TS _ 8) }
  '=' { PT _ (TS _ 9) }
  '==' { PT _ (TS _ 10) }
  '>' { PT _ (TS _ 11) }
  'else' { PT _ (TS _ 12) }
  'endlet' { PT _ (TS _ 13) }
  'fi' { PT _ (TS _ 14) }
  'if' { PT _ (TS _ 15) }
  'in' { PT _ (TS _ 16) }
  'let' { PT _ (TS _ 17) }
  'then' { PT _ (TS _ 18) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Exp1 :: { Exp }
Exp1 : 'if' Exp2 'then' Exp2 'else' Exp2 'fi' { MIML.Abs.EIf $2 $4 $6 }
     | Exp2 { $1 }
Exp3 :: { Exp }
Exp3 : Exp4 '==' Exp4 { MIML.Abs.EEq $1 $3 }
     | Exp4 '!=' Exp4 { MIML.Abs.ENe $1 $3 }
     | Exp4 '<' Exp4 { MIML.Abs.ELe $1 $3 }
     | Exp4 '>' Exp4 { MIML.Abs.EGe $1 $3 }
     | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '+' Exp5 { MIML.Abs.EPlus $1 $3 }
     | Exp4 '-' Exp5 { MIML.Abs.EMinus $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp6 { MIML.Abs.ETimes $1 $3 }
     | Exp5 '/' Exp6 { MIML.Abs.EDiv $1 $3 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : '-' Exp7 { MIML.Abs.ENeg $2 }
     | Ident ListExp7 { MIML.Abs.EApp $1 $2 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Ident { MIML.Abs.EVar $1 }
     | Integer { MIML.Abs.EInt $1 }
     | 'let' Ident '=' Exp 'in' Exp 'endlet' { MIML.Abs.ELet $2 $4 $6 }
     | '(' Exp ')' { $2 }
ListExp7 :: { [Exp] }
ListExp7 : Exp7 { (:[]) $1 } | Exp7 ListExp7 { (:) $1 $2 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}


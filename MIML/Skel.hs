{-# LANGUAGE GADTs #-}
module MIML.Skel where

-- Haskell module generated by the BNF converter

import MIML.Abs
import MIML.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  EIf exp0 exp1 exp2 -> failure t
  EEq exp0 exp1 -> failure t
  ENe exp0 exp1 -> failure t
  ELe exp0 exp1 -> failure t
  EGe exp0 exp1 -> failure t
  EPlus exp0 exp1 -> failure t
  EMinus exp0 exp1 -> failure t
  ETimes exp0 exp1 -> failure t
  EDiv exp0 exp1 -> failure t
  ENeg exp -> failure t
  EApp ident exps -> failure t
  EVar ident -> failure t
  EInt integer -> failure t
  ELet ident exp0 exp1 -> failure t
  Ident str -> failure t

transExp :: Exp -> Result
transExp t = case t of
  EIf exp0 exp1 exp2 -> failure t
  EEq exp0 exp1 -> failure t
  ENe exp0 exp1 -> failure t
  ELe exp0 exp1 -> failure t
  EGe exp0 exp1 -> failure t
  EPlus exp0 exp1 -> failure t
  EMinus exp0 exp1 -> failure t
  ETimes exp0 exp1 -> failure t
  EDiv exp0 exp1 -> failure t
  ENeg exp -> failure t
  EApp ident exps -> failure t
  EVar ident -> failure t
  EInt integer -> failure t
  ELet ident exp0 exp1 -> failure t

transIdent :: Ident -> Result
transIdent t = case t of
  Ident str -> failure t

